Аннотация
Данная программа предназначена для решения базовых геодезических задач: прямой (вычисление координат точки по расстоянию и дирекционному углу) и обратной (определение расстояния и угла между точками). Она будет полезна студентам геодезических специальностей, инженерам-геодезистам и маркшейдерам, преподавателям для учебных целей.
Ее преимущества заключаются в том, что все полученные расчеты сохраняются в файл teodolit.txt, если же такого файла нет, то программа автоматически создает его. Также есть возможность вывести на экран пользователю историю 5 последних операций. Для удобства реализован словарь для хранения координат полученных координат точек.
тз программы: решение прямой и обратной геодезических задач
1. решение прямой геодезической задачи
2. решение обратной геодезической задачи 
далее решаем задачи по алгоритмам:
программа должна решать прямую и обратную геодезические задачи: прямая геодезическая задача заключается в нахождении прямоугольных координат x2 и y2 второй точки направления. пользователь вводит прямоугольные координаты первой точки x1 и y1, дирекционный угол альфа направления на вторую точку и расстояние между ними (L), далее производится расчет координат второй точки по следующему алгоритму:
сначала высчитываем приращения координат по формуле:
приращение дельта x=расстояние между точками L умножить на косинус дирекционного угла альфа
приращение дельта y= расстояния между точками L умножить на синус дирекционного угла альфа
далее высчитываем окончательные прямоугольные координаты второй точки по формуле
x2=x1+приращение дельта x
y2=y1+приращение дельта y
затем выводим информацию пользователю на экран
обратная геодезическая задача предполагает нахождение расстояния L между двумя точками поверхности и дирекционного угла альфа между ними, при этом пользователь вводит известные значения прямоугольных координат первой точки x1 и y1 и второй точки x2 и y2.
алгоритм действий следующий:
1.находим приращения координат следующим образом:
дельта x=x2-x1     
дельта y=y2-y1
2.находим тангенс румба по формуле:
tg(a)=abs(дельта y/ дельта x), находим арктангенс румба в градусах, минутах, секундах.
далее проверяем, к какой четверти относится румб, и если надо, то приводим его к конечному значению дирекционного угла согласно следующему условию:
если дельта y и дельта x оба положительные, то румб= дирекционному углу, считаем тангенс румба и находим его арктангенс
если дельта x отрицательное, дельта y положительное, то в таком случае румб находится во 2 четверти, приводим его к дирекционному углу по формуле: дирекционный угол альфа= 180 градусов - румб. 
если дельта x отрицательное, дельта y отрицательное, то в таком случае румб находится в 3 четверти, приводим его к дирекционному углу согласно следующей формуле: дирекционный угол альфа= 180 градусов + румб. 
если дельта x положительное, дельта y отрицательное, то румб находится в 4 четверти, приводим румб к дирекционному углу альфа по формуле: дирекционный угол альфа = 360 градусов- румб.
3.находим расстояние L между точками по формуле: L = корень квадратный из суммы квадратов дельта x и дельта y
4. выводим пользователю значение дирекционного угла в градусах, минутах, секундах и расстояние L между точками
после решения задачи программа возвращает пользователя в главное меню с выбором
также программа должна сохранять полученные значения координат в файл teodolit.txt поочередно, подписывая "первые значения", "вторые значения"...
=======================================================================================
в программе рассмотрены следующие элементы программирования на pyton:
1/2. ввод вывод данных
3. структура, принятие решение, булева логика
4.структура с повторением
5.функции
6.рекурсия
7.файлы и исключения
8.списки и кортежи
9.строковые операции
10.словари и множества
11.классы и объектно- ориентированное программирование

подробный алгоритм работы:
импортируем библиотеки math, os, datetime для работы с математическими операциями и файлами, корректного сохранения дат в файле.
создаем класс geodetic calculator, устанавливаем счетчик записей, список для сохранения истории, словарь для хранения полученных в ходе решения задач точек с ключами (ID:x,y)) (все они создают кортежи при работе)
работаем с файлом teodolit.txt - в него сохраняется вся информация, если он не существует, то файл создается автоматически
    def save_to_file(self, data): - реализует запись в историю кортежем, записываем в файл
    def get_valid_input(self, prompt, input_type=float, max_attempts=3, attempt=1):- рекурсивная функция, которая запрашивает повторный ввод данных от пользователя, если он совершил некорректный ввод.
    def degrees_to_dms(self, degrees):- реализует перевод десятичных градусов в градусы, минуты и секунды. будем вызывать в последующих функциях
    def direct_problem(self):- функция для решения прямой геодезической задачи, реализует решение прямой геодезической задачи; пользователь вводит исходные данные через input с клавиатуры, сохраняет полученные координаты точки в словарь, сохраняет полученные значения
выводит результат или сообщ об ошибке
    def inverse_problem(self): - реализует решение обратной геодезической задачи, пользователь вводит исходные данные с клавиатуры, приводит полученный десятичный угол
к виду градусов, минут и секунд,  сохраняет полученные данные, выводит пользователю вычисления
    def show_points(self):- выводит словарь сохраненных точек, если сохраненных точек нет, выводит сообщение: "нет сохраненных точек"
    def show_history(self):-выводит историю последних 5 операций (список), если история операций пуста, выводит сообщение: "история операций пуста"
вызываем бесконечный цикл главного меню (while true), геодезический калькулятор, выводим меню для пользователя, с помощью структуры с условием, запускаем соответствующую функцию:
1-решение прямой геодезической задачи (  def direct_problem(self):)
2- решение обратной геодезической задачи (def inverse_problem(self):)
3-показать сохраненные точки (    def show_points(self):)
4- показать историю последних 5 операций ( def show_history(self):)
5-break завершение работы программы (break - прерывает цикл)
при реализации 1 и 2 пунктов пользователь вводит исходные данные с клавиатуры

====================================================================================
